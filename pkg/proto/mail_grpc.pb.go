// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MailBoxClient is the client API for MailBox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailBoxClient interface {
	Send(ctx context.Context, in *MailTask, opts ...grpc.CallOption) (*SendMailResponse, error)
	ListServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ServerList, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (MailBox_UploadClient, error)
	Watch(ctx context.Context, in *Server, opts ...grpc.CallOption) (MailBox_WatchClient, error)
	Register(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResponse, error)
}

type mailBoxClient struct {
	cc grpc.ClientConnInterface
}

func NewMailBoxClient(cc grpc.ClientConnInterface) MailBoxClient {
	return &mailBoxClient{cc}
}

func (c *mailBoxClient) Send(ctx context.Context, in *MailTask, opts ...grpc.CallOption) (*SendMailResponse, error) {
	out := new(SendMailResponse)
	err := c.cc.Invoke(ctx, "/proto.MailBox/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailBoxClient) ListServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ServerList, error) {
	out := new(ServerList)
	err := c.cc.Invoke(ctx, "/proto.MailBox/ListServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailBoxClient) Upload(ctx context.Context, opts ...grpc.CallOption) (MailBox_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &MailBox_ServiceDesc.Streams[0], "/proto.MailBox/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &mailBoxUploadClient{stream}
	return x, nil
}

type MailBox_UploadClient interface {
	Send(*UploadFile) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type mailBoxUploadClient struct {
	grpc.ClientStream
}

func (x *mailBoxUploadClient) Send(m *UploadFile) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mailBoxUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mailBoxClient) Watch(ctx context.Context, in *Server, opts ...grpc.CallOption) (MailBox_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &MailBox_ServiceDesc.Streams[1], "/proto.MailBox/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &mailBoxWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MailBox_WatchClient interface {
	Recv() (*Mail, error)
	grpc.ClientStream
}

type mailBoxWatchClient struct {
	grpc.ClientStream
}

func (x *mailBoxWatchClient) Recv() (*Mail, error) {
	m := new(Mail)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mailBoxClient) Register(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/proto.MailBox/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailBoxServer is the server API for MailBox service.
// All implementations must embed UnimplementedMailBoxServer
// for forward compatibility
type MailBoxServer interface {
	Send(context.Context, *MailTask) (*SendMailResponse, error)
	ListServer(context.Context, *empty.Empty) (*ServerList, error)
	Upload(MailBox_UploadServer) error
	Watch(*Server, MailBox_WatchServer) error
	Register(context.Context, *User) (*UserResponse, error)
	mustEmbedUnimplementedMailBoxServer()
}

// UnimplementedMailBoxServer must be embedded to have forward compatible implementations.
type UnimplementedMailBoxServer struct {
}

func (UnimplementedMailBoxServer) Send(context.Context, *MailTask) (*SendMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMailBoxServer) ListServer(context.Context, *empty.Empty) (*ServerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServer not implemented")
}
func (UnimplementedMailBoxServer) Upload(MailBox_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedMailBoxServer) Watch(*Server, MailBox_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedMailBoxServer) Register(context.Context, *User) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedMailBoxServer) mustEmbedUnimplementedMailBoxServer() {}

// UnsafeMailBoxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailBoxServer will
// result in compilation errors.
type UnsafeMailBoxServer interface {
	mustEmbedUnimplementedMailBoxServer()
}

func RegisterMailBoxServer(s grpc.ServiceRegistrar, srv MailBoxServer) {
	s.RegisterService(&MailBox_ServiceDesc, srv)
}

func _MailBox_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailBoxServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MailBox/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailBoxServer).Send(ctx, req.(*MailTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailBox_ListServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailBoxServer).ListServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MailBox/ListServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailBoxServer).ListServer(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailBox_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MailBoxServer).Upload(&mailBoxUploadServer{stream})
}

type MailBox_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadFile, error)
	grpc.ServerStream
}

type mailBoxUploadServer struct {
	grpc.ServerStream
}

func (x *mailBoxUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mailBoxUploadServer) Recv() (*UploadFile, error) {
	m := new(UploadFile)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MailBox_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Server)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MailBoxServer).Watch(m, &mailBoxWatchServer{stream})
}

type MailBox_WatchServer interface {
	Send(*Mail) error
	grpc.ServerStream
}

type mailBoxWatchServer struct {
	grpc.ServerStream
}

func (x *mailBoxWatchServer) Send(m *Mail) error {
	return x.ServerStream.SendMsg(m)
}

func _MailBox_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailBoxServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MailBox/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailBoxServer).Register(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// MailBox_ServiceDesc is the grpc.ServiceDesc for MailBox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailBox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MailBox",
	HandlerType: (*MailBoxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _MailBox_Send_Handler,
		},
		{
			MethodName: "ListServer",
			Handler:    _MailBox_ListServer_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _MailBox_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _MailBox_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _MailBox_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mail.proto",
}
